// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "minocore/minocore.h"
#include "RcppBlaze3.h"
#include "../inst/include/Rfgc.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// display_constants
void display_constants();
static SEXP _Rfgc_display_constants_try() {
BEGIN_RCPP
    display_constants();
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_display_constants() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_display_constants_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// display_sse_info
void display_sse_info();
static SEXP _Rfgc_display_sse_info_try() {
BEGIN_RCPP
    display_sse_info();
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_display_sse_info() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_display_sse_info_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// display_samplers
void display_samplers();
static SEXP _Rfgc_display_samplers_try() {
BEGIN_RCPP
    display_samplers();
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_display_samplers() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_display_samplers_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// construct_coresetdd
Rcpp::List construct_coresetdd(blaze::DynamicMatrix<double>& X, int k, size_t cs_size, int measure, int sampler, uint64_t seed);
static SEXP _Rfgc_construct_coresetdd_try(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP measureSEXP, SEXP samplerSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type cs_size(cs_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type measure(measureSEXP);
    Rcpp::traits::input_parameter< int >::type sampler(samplerSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_coresetdd(X, k, cs_size, measure, sampler, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_construct_coresetdd(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP measureSEXP, SEXP samplerSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_construct_coresetdd_try(XSEXP, kSEXP, cs_sizeSEXP, measureSEXP, samplerSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// construct_coresetdf
Rcpp::List construct_coresetdf(blaze::DynamicMatrix<float>& X, int k, size_t cs_size, int measure, int sampler, uint64_t seed);
static SEXP _Rfgc_construct_coresetdf_try(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP measureSEXP, SEXP samplerSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type cs_size(cs_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type measure(measureSEXP);
    Rcpp::traits::input_parameter< int >::type sampler(samplerSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_coresetdf(X, k, cs_size, measure, sampler, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_construct_coresetdf(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP measureSEXP, SEXP samplerSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_construct_coresetdf_try(XSEXP, kSEXP, cs_sizeSEXP, measureSEXP, samplerSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// construct_coresetsd
Rcpp::List construct_coresetsd(blaze::CompressedMatrix<double>& X, int k, size_t cs_size, int measure, int sampler, uint64_t seed);
static SEXP _Rfgc_construct_coresetsd_try(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP measureSEXP, SEXP samplerSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type cs_size(cs_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type measure(measureSEXP);
    Rcpp::traits::input_parameter< int >::type sampler(samplerSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_coresetsd(X, k, cs_size, measure, sampler, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_construct_coresetsd(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP measureSEXP, SEXP samplerSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_construct_coresetsd_try(XSEXP, kSEXP, cs_sizeSEXP, measureSEXP, samplerSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// construct_coresetsf
Rcpp::List construct_coresetsf(blaze::CompressedMatrix<float>& X, int k, size_t cs_size, int measure, int sampler, uint64_t seed);
static SEXP _Rfgc_construct_coresetsf_try(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP measureSEXP, SEXP samplerSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type cs_size(cs_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type measure(measureSEXP);
    Rcpp::traits::input_parameter< int >::type sampler(samplerSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_coresetsf(X, k, cs_size, measure, sampler, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_construct_coresetsf(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP measureSEXP, SEXP samplerSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_construct_coresetsf_try(XSEXP, kSEXP, cs_sizeSEXP, measureSEXP, samplerSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// kmeans_coresetdd
Rcpp::List kmeans_coresetdd(const blaze::DynamicMatrix<double>& X, int k, size_t cs_size, uint64_t seed);
static SEXP _Rfgc_kmeans_coresetdd_try(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type cs_size(cs_sizeSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans_coresetdd(X, k, cs_size, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_kmeans_coresetdd(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_kmeans_coresetdd_try(XSEXP, kSEXP, cs_sizeSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// kmeans_coresetdf
Rcpp::List kmeans_coresetdf(const blaze::DynamicMatrix<float>& X, int k, size_t cs_size, uint64_t seed);
static SEXP _Rfgc_kmeans_coresetdf_try(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type cs_size(cs_sizeSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans_coresetdf(X, k, cs_size, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_kmeans_coresetdf(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_kmeans_coresetdf_try(XSEXP, kSEXP, cs_sizeSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// kmeans_coresetsd
Rcpp::List kmeans_coresetsd(const blaze::CompressedMatrix<double>& X, int k, size_t cs_size, uint64_t seed);
static SEXP _Rfgc_kmeans_coresetsd_try(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type cs_size(cs_sizeSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans_coresetsd(X, k, cs_size, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_kmeans_coresetsd(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_kmeans_coresetsd_try(XSEXP, kSEXP, cs_sizeSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// kmeans_coresetsf
Rcpp::List kmeans_coresetsf(const blaze::CompressedMatrix<float>& X, int k, size_t cs_size, uint64_t seed);
static SEXP _Rfgc_kmeans_coresetsf_try(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type cs_size(cs_sizeSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans_coresetsf(X, k, cs_size, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_kmeans_coresetsf(SEXP XSEXP, SEXP kSEXP, SEXP cs_sizeSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_kmeans_coresetsf_try(XSEXP, kSEXP, cs_sizeSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dist_matrixdd
Rcpp::NumericMatrix dist_matrixdd(blaze::DynamicMatrix<double>& X, int arg, double gamma_beta);
static SEXP _Rfgc_dist_matrixdd_try(SEXP XSEXP, SEXP argSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type arg(argSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_matrixdd(X, arg, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_dist_matrixdd(SEXP XSEXP, SEXP argSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_dist_matrixdd_try(XSEXP, argSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dist_matrixdf
Rcpp::NumericMatrix dist_matrixdf(blaze::DynamicMatrix<float>& X, int arg, double gamma_beta);
static SEXP _Rfgc_dist_matrixdf_try(SEXP XSEXP, SEXP argSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type arg(argSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_matrixdf(X, arg, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_dist_matrixdf(SEXP XSEXP, SEXP argSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_dist_matrixdf_try(XSEXP, argSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dist_matrixsd
Rcpp::NumericMatrix dist_matrixsd(blaze::CompressedMatrix<double>& X, int arg, double gamma_beta);
static SEXP _Rfgc_dist_matrixsd_try(SEXP XSEXP, SEXP argSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type arg(argSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_matrixsd(X, arg, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_dist_matrixsd(SEXP XSEXP, SEXP argSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_dist_matrixsd_try(XSEXP, argSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dist_matrixsf
Rcpp::NumericMatrix dist_matrixsf(blaze::CompressedMatrix<float>& X, int arg, double gamma_beta);
static SEXP _Rfgc_dist_matrixsf_try(SEXP XSEXP, SEXP argSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type arg(argSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_matrixsf(X, arg, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_dist_matrixsf(SEXP XSEXP, SEXP argSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_dist_matrixsf_try(XSEXP, argSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// llr_matrixdd
Rcpp::NumericMatrix llr_matrixdd(blaze::DynamicMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_llr_matrixdd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(llr_matrixdd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_llr_matrixdd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_llr_matrixdd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// llr_matrixdf
Rcpp::NumericMatrix llr_matrixdf(blaze::DynamicMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_llr_matrixdf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(llr_matrixdf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_llr_matrixdf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_llr_matrixdf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// llr_matrixsd
Rcpp::NumericMatrix llr_matrixsd(blaze::CompressedMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_llr_matrixsd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(llr_matrixsd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_llr_matrixsd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_llr_matrixsd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// llr_matrixsf
Rcpp::NumericMatrix llr_matrixsf(blaze::CompressedMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_llr_matrixsf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(llr_matrixsf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_llr_matrixsf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_llr_matrixsf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// uwllr_matrixdd
Rcpp::NumericMatrix uwllr_matrixdd(blaze::DynamicMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_uwllr_matrixdd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(uwllr_matrixdd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_uwllr_matrixdd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_uwllr_matrixdd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// uwllr_matrixdf
Rcpp::NumericMatrix uwllr_matrixdf(blaze::DynamicMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_uwllr_matrixdf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(uwllr_matrixdf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_uwllr_matrixdf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_uwllr_matrixdf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// uwllr_matrixsd
Rcpp::NumericMatrix uwllr_matrixsd(blaze::CompressedMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_uwllr_matrixsd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(uwllr_matrixsd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_uwllr_matrixsd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_uwllr_matrixsd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// uwllr_matrixsf
Rcpp::NumericMatrix uwllr_matrixsf(blaze::CompressedMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_uwllr_matrixsf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(uwllr_matrixsf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_uwllr_matrixsf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_uwllr_matrixsf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsd_matrixdd
Rcpp::NumericMatrix jsd_matrixdd(blaze::DynamicMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_jsd_matrixdd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(jsd_matrixdd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsd_matrixdd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsd_matrixdd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsd_matrixdf
Rcpp::NumericMatrix jsd_matrixdf(blaze::DynamicMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_jsd_matrixdf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(jsd_matrixdf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsd_matrixdf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsd_matrixdf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsd_matrixsd
Rcpp::NumericMatrix jsd_matrixsd(blaze::CompressedMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_jsd_matrixsd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(jsd_matrixsd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsd_matrixsd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsd_matrixsd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsd_matrixsf
Rcpp::NumericMatrix jsd_matrixsf(blaze::CompressedMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_jsd_matrixsf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(jsd_matrixsf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsd_matrixsf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsd_matrixsf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsm_matrixdd
Rcpp::NumericMatrix jsm_matrixdd(blaze::DynamicMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_jsm_matrixdd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(jsm_matrixdd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsm_matrixdd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsm_matrixdd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsm_matrixdf
Rcpp::NumericMatrix jsm_matrixdf(blaze::DynamicMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_jsm_matrixdf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(jsm_matrixdf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsm_matrixdf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsm_matrixdf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsm_matrixsd
Rcpp::NumericMatrix jsm_matrixsd(blaze::CompressedMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_jsm_matrixsd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(jsm_matrixsd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsm_matrixsd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsm_matrixsd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsm_matrixsf
Rcpp::NumericMatrix jsm_matrixsf(blaze::CompressedMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_jsm_matrixsf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(jsm_matrixsf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsm_matrixsf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsm_matrixsf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l2_matrixdd
Rcpp::NumericMatrix l2_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_l2_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l2_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l2_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l2_matrixdf
Rcpp::NumericMatrix l2_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_l2_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l2_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l2_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l2_matrixsd
Rcpp::NumericMatrix l2_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_l2_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l2_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l2_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l2_matrixsf
Rcpp::NumericMatrix l2_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_l2_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l2_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l2_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l1_matrixdd
Rcpp::NumericMatrix l1_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_l1_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l1_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l1_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l1_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l1_matrixdf
Rcpp::NumericMatrix l1_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_l1_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l1_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l1_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l1_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l1_matrixsd
Rcpp::NumericMatrix l1_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_l1_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l1_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l1_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l1_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l1_matrixsf
Rcpp::NumericMatrix l1_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_l1_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l1_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l1_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l1_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sqrl2_matrixdd
Rcpp::NumericMatrix sqrl2_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_sqrl2_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrl2_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_sqrl2_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_sqrl2_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sqrl2_matrixdf
Rcpp::NumericMatrix sqrl2_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_sqrl2_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrl2_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_sqrl2_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_sqrl2_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sqrl2_matrixsd
Rcpp::NumericMatrix sqrl2_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_sqrl2_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrl2_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_sqrl2_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_sqrl2_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sqrl2_matrixsf
Rcpp::NumericMatrix sqrl2_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_sqrl2_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrl2_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_sqrl2_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_sqrl2_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mkl_matrixdd
Rcpp::NumericMatrix mkl_matrixdd(blaze::DynamicMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_mkl_matrixdd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_matrixdd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_mkl_matrixdd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_mkl_matrixdd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mkl_matrixdf
Rcpp::NumericMatrix mkl_matrixdf(blaze::DynamicMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_mkl_matrixdf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_matrixdf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_mkl_matrixdf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_mkl_matrixdf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mkl_matrixsd
Rcpp::NumericMatrix mkl_matrixsd(blaze::CompressedMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_mkl_matrixsd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_matrixsd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_mkl_matrixsd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_mkl_matrixsd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mkl_matrixsf
Rcpp::NumericMatrix mkl_matrixsf(blaze::CompressedMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_mkl_matrixsf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_matrixsf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_mkl_matrixsf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_mkl_matrixsf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tvd_matrixdd
Rcpp::NumericMatrix tvd_matrixdd(blaze::DynamicMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_tvd_matrixdd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(tvd_matrixdd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_tvd_matrixdd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_tvd_matrixdd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tvd_matrixdf
Rcpp::NumericMatrix tvd_matrixdf(blaze::DynamicMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_tvd_matrixdf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(tvd_matrixdf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_tvd_matrixdf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_tvd_matrixdf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tvd_matrixsd
Rcpp::NumericMatrix tvd_matrixsd(blaze::CompressedMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_tvd_matrixsd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(tvd_matrixsd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_tvd_matrixsd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_tvd_matrixsd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tvd_matrixsf
Rcpp::NumericMatrix tvd_matrixsf(blaze::CompressedMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_tvd_matrixsf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(tvd_matrixsf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_tvd_matrixsf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_tvd_matrixsf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bhattacharyya_metric_matrixdd
Rcpp::NumericMatrix bhattacharyya_metric_matrixdd(blaze::DynamicMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_bhattacharyya_metric_matrixdd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_metric_matrixdd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_bhattacharyya_metric_matrixdd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_bhattacharyya_metric_matrixdd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bhattacharyya_metric_matrixdf
Rcpp::NumericMatrix bhattacharyya_metric_matrixdf(blaze::DynamicMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_bhattacharyya_metric_matrixdf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_metric_matrixdf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_bhattacharyya_metric_matrixdf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_bhattacharyya_metric_matrixdf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bhattacharyya_metric_matrixsd
Rcpp::NumericMatrix bhattacharyya_metric_matrixsd(blaze::CompressedMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_bhattacharyya_metric_matrixsd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_metric_matrixsd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_bhattacharyya_metric_matrixsd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_bhattacharyya_metric_matrixsd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bhattacharyya_metric_matrixsf
Rcpp::NumericMatrix bhattacharyya_metric_matrixsf(blaze::CompressedMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_bhattacharyya_metric_matrixsf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_metric_matrixsf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_bhattacharyya_metric_matrixsf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_bhattacharyya_metric_matrixsf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bhattacharyya_distance_matrixdd
Rcpp::NumericMatrix bhattacharyya_distance_matrixdd(blaze::DynamicMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_bhattacharyya_distance_matrixdd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_distance_matrixdd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_bhattacharyya_distance_matrixdd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_bhattacharyya_distance_matrixdd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bhattacharyya_distance_matrixdf
Rcpp::NumericMatrix bhattacharyya_distance_matrixdf(blaze::DynamicMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_bhattacharyya_distance_matrixdf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_distance_matrixdf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_bhattacharyya_distance_matrixdf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_bhattacharyya_distance_matrixdf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bhattacharyya_distance_matrixsd
Rcpp::NumericMatrix bhattacharyya_distance_matrixsd(blaze::CompressedMatrix<double>& X, double gamma_beta);
static SEXP _Rfgc_bhattacharyya_distance_matrixsd_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_distance_matrixsd(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_bhattacharyya_distance_matrixsd(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_bhattacharyya_distance_matrixsd_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// bhattacharyya_distance_matrixsf
Rcpp::NumericMatrix bhattacharyya_distance_matrixsf(blaze::CompressedMatrix<float>& X, double gamma_beta);
static SEXP _Rfgc_bhattacharyya_distance_matrixsf_try(SEXP XSEXP, SEXP gamma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_beta(gamma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya_distance_matrixsf(X, gamma_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_bhattacharyya_distance_matrixsf(SEXP XSEXP, SEXP gamma_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_bhattacharyya_distance_matrixsf_try(XSEXP, gamma_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _Rfgc_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("void(*display_constants)()");
        signatures.insert("void(*display_sse_info)()");
        signatures.insert("void(*display_samplers)()");
        signatures.insert("Rcpp::List(*construct_coresetdd)(blaze::DynamicMatrix<double>&,int,size_t,int,int,uint64_t)");
        signatures.insert("Rcpp::List(*construct_coresetdf)(blaze::DynamicMatrix<float>&,int,size_t,int,int,uint64_t)");
        signatures.insert("Rcpp::List(*construct_coresetsd)(blaze::CompressedMatrix<double>&,int,size_t,int,int,uint64_t)");
        signatures.insert("Rcpp::List(*construct_coresetsf)(blaze::CompressedMatrix<float>&,int,size_t,int,int,uint64_t)");
        signatures.insert("Rcpp::List(*kmeans_coresetdd)(const blaze::DynamicMatrix<double>&,int,size_t,uint64_t)");
        signatures.insert("Rcpp::List(*kmeans_coresetdf)(const blaze::DynamicMatrix<float>&,int,size_t,uint64_t)");
        signatures.insert("Rcpp::List(*kmeans_coresetsd)(const blaze::CompressedMatrix<double>&,int,size_t,uint64_t)");
        signatures.insert("Rcpp::List(*kmeans_coresetsf)(const blaze::CompressedMatrix<float>&,int,size_t,uint64_t)");
        signatures.insert("Rcpp::NumericMatrix(*dist_matrixdd)(blaze::DynamicMatrix<double>&,int,double)");
        signatures.insert("Rcpp::NumericMatrix(*dist_matrixdf)(blaze::DynamicMatrix<float>&,int,double)");
        signatures.insert("Rcpp::NumericMatrix(*dist_matrixsd)(blaze::CompressedMatrix<double>&,int,double)");
        signatures.insert("Rcpp::NumericMatrix(*dist_matrixsf)(blaze::CompressedMatrix<float>&,int,double)");
        signatures.insert("Rcpp::NumericMatrix(*llr_matrixdd)(blaze::DynamicMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*llr_matrixdf)(blaze::DynamicMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*llr_matrixsd)(blaze::CompressedMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*llr_matrixsf)(blaze::CompressedMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*uwllr_matrixdd)(blaze::DynamicMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*uwllr_matrixdf)(blaze::DynamicMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*uwllr_matrixsd)(blaze::CompressedMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*uwllr_matrixsf)(blaze::CompressedMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*jsd_matrixdd)(blaze::DynamicMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*jsd_matrixdf)(blaze::DynamicMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*jsd_matrixsd)(blaze::CompressedMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*jsd_matrixsf)(blaze::CompressedMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*jsm_matrixdd)(blaze::DynamicMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*jsm_matrixdf)(blaze::DynamicMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*jsm_matrixsd)(blaze::CompressedMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*jsm_matrixsf)(blaze::CompressedMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*l2_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*l2_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*l2_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*l2_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*l1_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*l1_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*l1_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*l1_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*sqrl2_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*sqrl2_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*sqrl2_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*sqrl2_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*mkl_matrixdd)(blaze::DynamicMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*mkl_matrixdf)(blaze::DynamicMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*mkl_matrixsd)(blaze::CompressedMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*mkl_matrixsf)(blaze::CompressedMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*tvd_matrixdd)(blaze::DynamicMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*tvd_matrixdf)(blaze::DynamicMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*tvd_matrixsd)(blaze::CompressedMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*tvd_matrixsf)(blaze::CompressedMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*bhattacharyya_metric_matrixdd)(blaze::DynamicMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*bhattacharyya_metric_matrixdf)(blaze::DynamicMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*bhattacharyya_metric_matrixsd)(blaze::CompressedMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*bhattacharyya_metric_matrixsf)(blaze::CompressedMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*bhattacharyya_distance_matrixdd)(blaze::DynamicMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*bhattacharyya_distance_matrixdf)(blaze::DynamicMatrix<float>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*bhattacharyya_distance_matrixsd)(blaze::CompressedMatrix<double>&,double)");
        signatures.insert("Rcpp::NumericMatrix(*bhattacharyya_distance_matrixsf)(blaze::CompressedMatrix<float>&,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _Rfgc_RcppExport_registerCCallable() { 
    R_RegisterCCallable("Rfgc", "_Rfgc_display_constants", (DL_FUNC)_Rfgc_display_constants_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_display_sse_info", (DL_FUNC)_Rfgc_display_sse_info_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_display_samplers", (DL_FUNC)_Rfgc_display_samplers_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_construct_coresetdd", (DL_FUNC)_Rfgc_construct_coresetdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_construct_coresetdf", (DL_FUNC)_Rfgc_construct_coresetdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_construct_coresetsd", (DL_FUNC)_Rfgc_construct_coresetsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_construct_coresetsf", (DL_FUNC)_Rfgc_construct_coresetsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_kmeans_coresetdd", (DL_FUNC)_Rfgc_kmeans_coresetdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_kmeans_coresetdf", (DL_FUNC)_Rfgc_kmeans_coresetdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_kmeans_coresetsd", (DL_FUNC)_Rfgc_kmeans_coresetsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_kmeans_coresetsf", (DL_FUNC)_Rfgc_kmeans_coresetsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_dist_matrixdd", (DL_FUNC)_Rfgc_dist_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_dist_matrixdf", (DL_FUNC)_Rfgc_dist_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_dist_matrixsd", (DL_FUNC)_Rfgc_dist_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_dist_matrixsf", (DL_FUNC)_Rfgc_dist_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_llr_matrixdd", (DL_FUNC)_Rfgc_llr_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_llr_matrixdf", (DL_FUNC)_Rfgc_llr_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_llr_matrixsd", (DL_FUNC)_Rfgc_llr_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_llr_matrixsf", (DL_FUNC)_Rfgc_llr_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_uwllr_matrixdd", (DL_FUNC)_Rfgc_uwllr_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_uwllr_matrixdf", (DL_FUNC)_Rfgc_uwllr_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_uwllr_matrixsd", (DL_FUNC)_Rfgc_uwllr_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_uwllr_matrixsf", (DL_FUNC)_Rfgc_uwllr_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsd_matrixdd", (DL_FUNC)_Rfgc_jsd_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsd_matrixdf", (DL_FUNC)_Rfgc_jsd_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsd_matrixsd", (DL_FUNC)_Rfgc_jsd_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsd_matrixsf", (DL_FUNC)_Rfgc_jsd_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsm_matrixdd", (DL_FUNC)_Rfgc_jsm_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsm_matrixdf", (DL_FUNC)_Rfgc_jsm_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsm_matrixsd", (DL_FUNC)_Rfgc_jsm_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsm_matrixsf", (DL_FUNC)_Rfgc_jsm_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l2_matrixdd", (DL_FUNC)_Rfgc_l2_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l2_matrixdf", (DL_FUNC)_Rfgc_l2_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l2_matrixsd", (DL_FUNC)_Rfgc_l2_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l2_matrixsf", (DL_FUNC)_Rfgc_l2_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l1_matrixdd", (DL_FUNC)_Rfgc_l1_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l1_matrixdf", (DL_FUNC)_Rfgc_l1_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l1_matrixsd", (DL_FUNC)_Rfgc_l1_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l1_matrixsf", (DL_FUNC)_Rfgc_l1_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_sqrl2_matrixdd", (DL_FUNC)_Rfgc_sqrl2_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_sqrl2_matrixdf", (DL_FUNC)_Rfgc_sqrl2_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_sqrl2_matrixsd", (DL_FUNC)_Rfgc_sqrl2_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_sqrl2_matrixsf", (DL_FUNC)_Rfgc_sqrl2_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_mkl_matrixdd", (DL_FUNC)_Rfgc_mkl_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_mkl_matrixdf", (DL_FUNC)_Rfgc_mkl_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_mkl_matrixsd", (DL_FUNC)_Rfgc_mkl_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_mkl_matrixsf", (DL_FUNC)_Rfgc_mkl_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_tvd_matrixdd", (DL_FUNC)_Rfgc_tvd_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_tvd_matrixdf", (DL_FUNC)_Rfgc_tvd_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_tvd_matrixsd", (DL_FUNC)_Rfgc_tvd_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_tvd_matrixsf", (DL_FUNC)_Rfgc_tvd_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_bhattacharyya_metric_matrixdd", (DL_FUNC)_Rfgc_bhattacharyya_metric_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_bhattacharyya_metric_matrixdf", (DL_FUNC)_Rfgc_bhattacharyya_metric_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_bhattacharyya_metric_matrixsd", (DL_FUNC)_Rfgc_bhattacharyya_metric_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_bhattacharyya_metric_matrixsf", (DL_FUNC)_Rfgc_bhattacharyya_metric_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_bhattacharyya_distance_matrixdd", (DL_FUNC)_Rfgc_bhattacharyya_distance_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_bhattacharyya_distance_matrixdf", (DL_FUNC)_Rfgc_bhattacharyya_distance_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_bhattacharyya_distance_matrixsd", (DL_FUNC)_Rfgc_bhattacharyya_distance_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_bhattacharyya_distance_matrixsf", (DL_FUNC)_Rfgc_bhattacharyya_distance_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_RcppExport_validate", (DL_FUNC)_Rfgc_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rfgc_display_constants", (DL_FUNC) &_Rfgc_display_constants, 0},
    {"_Rfgc_display_sse_info", (DL_FUNC) &_Rfgc_display_sse_info, 0},
    {"_Rfgc_display_samplers", (DL_FUNC) &_Rfgc_display_samplers, 0},
    {"_Rfgc_construct_coresetdd", (DL_FUNC) &_Rfgc_construct_coresetdd, 6},
    {"_Rfgc_construct_coresetdf", (DL_FUNC) &_Rfgc_construct_coresetdf, 6},
    {"_Rfgc_construct_coresetsd", (DL_FUNC) &_Rfgc_construct_coresetsd, 6},
    {"_Rfgc_construct_coresetsf", (DL_FUNC) &_Rfgc_construct_coresetsf, 6},
    {"_Rfgc_kmeans_coresetdd", (DL_FUNC) &_Rfgc_kmeans_coresetdd, 4},
    {"_Rfgc_kmeans_coresetdf", (DL_FUNC) &_Rfgc_kmeans_coresetdf, 4},
    {"_Rfgc_kmeans_coresetsd", (DL_FUNC) &_Rfgc_kmeans_coresetsd, 4},
    {"_Rfgc_kmeans_coresetsf", (DL_FUNC) &_Rfgc_kmeans_coresetsf, 4},
    {"_Rfgc_dist_matrixdd", (DL_FUNC) &_Rfgc_dist_matrixdd, 3},
    {"_Rfgc_dist_matrixdf", (DL_FUNC) &_Rfgc_dist_matrixdf, 3},
    {"_Rfgc_dist_matrixsd", (DL_FUNC) &_Rfgc_dist_matrixsd, 3},
    {"_Rfgc_dist_matrixsf", (DL_FUNC) &_Rfgc_dist_matrixsf, 3},
    {"_Rfgc_llr_matrixdd", (DL_FUNC) &_Rfgc_llr_matrixdd, 2},
    {"_Rfgc_llr_matrixdf", (DL_FUNC) &_Rfgc_llr_matrixdf, 2},
    {"_Rfgc_llr_matrixsd", (DL_FUNC) &_Rfgc_llr_matrixsd, 2},
    {"_Rfgc_llr_matrixsf", (DL_FUNC) &_Rfgc_llr_matrixsf, 2},
    {"_Rfgc_uwllr_matrixdd", (DL_FUNC) &_Rfgc_uwllr_matrixdd, 2},
    {"_Rfgc_uwllr_matrixdf", (DL_FUNC) &_Rfgc_uwllr_matrixdf, 2},
    {"_Rfgc_uwllr_matrixsd", (DL_FUNC) &_Rfgc_uwllr_matrixsd, 2},
    {"_Rfgc_uwllr_matrixsf", (DL_FUNC) &_Rfgc_uwllr_matrixsf, 2},
    {"_Rfgc_jsd_matrixdd", (DL_FUNC) &_Rfgc_jsd_matrixdd, 2},
    {"_Rfgc_jsd_matrixdf", (DL_FUNC) &_Rfgc_jsd_matrixdf, 2},
    {"_Rfgc_jsd_matrixsd", (DL_FUNC) &_Rfgc_jsd_matrixsd, 2},
    {"_Rfgc_jsd_matrixsf", (DL_FUNC) &_Rfgc_jsd_matrixsf, 2},
    {"_Rfgc_jsm_matrixdd", (DL_FUNC) &_Rfgc_jsm_matrixdd, 2},
    {"_Rfgc_jsm_matrixdf", (DL_FUNC) &_Rfgc_jsm_matrixdf, 2},
    {"_Rfgc_jsm_matrixsd", (DL_FUNC) &_Rfgc_jsm_matrixsd, 2},
    {"_Rfgc_jsm_matrixsf", (DL_FUNC) &_Rfgc_jsm_matrixsf, 2},
    {"_Rfgc_l2_matrixdd", (DL_FUNC) &_Rfgc_l2_matrixdd, 1},
    {"_Rfgc_l2_matrixdf", (DL_FUNC) &_Rfgc_l2_matrixdf, 1},
    {"_Rfgc_l2_matrixsd", (DL_FUNC) &_Rfgc_l2_matrixsd, 1},
    {"_Rfgc_l2_matrixsf", (DL_FUNC) &_Rfgc_l2_matrixsf, 1},
    {"_Rfgc_l1_matrixdd", (DL_FUNC) &_Rfgc_l1_matrixdd, 1},
    {"_Rfgc_l1_matrixdf", (DL_FUNC) &_Rfgc_l1_matrixdf, 1},
    {"_Rfgc_l1_matrixsd", (DL_FUNC) &_Rfgc_l1_matrixsd, 1},
    {"_Rfgc_l1_matrixsf", (DL_FUNC) &_Rfgc_l1_matrixsf, 1},
    {"_Rfgc_sqrl2_matrixdd", (DL_FUNC) &_Rfgc_sqrl2_matrixdd, 1},
    {"_Rfgc_sqrl2_matrixdf", (DL_FUNC) &_Rfgc_sqrl2_matrixdf, 1},
    {"_Rfgc_sqrl2_matrixsd", (DL_FUNC) &_Rfgc_sqrl2_matrixsd, 1},
    {"_Rfgc_sqrl2_matrixsf", (DL_FUNC) &_Rfgc_sqrl2_matrixsf, 1},
    {"_Rfgc_mkl_matrixdd", (DL_FUNC) &_Rfgc_mkl_matrixdd, 2},
    {"_Rfgc_mkl_matrixdf", (DL_FUNC) &_Rfgc_mkl_matrixdf, 2},
    {"_Rfgc_mkl_matrixsd", (DL_FUNC) &_Rfgc_mkl_matrixsd, 2},
    {"_Rfgc_mkl_matrixsf", (DL_FUNC) &_Rfgc_mkl_matrixsf, 2},
    {"_Rfgc_tvd_matrixdd", (DL_FUNC) &_Rfgc_tvd_matrixdd, 2},
    {"_Rfgc_tvd_matrixdf", (DL_FUNC) &_Rfgc_tvd_matrixdf, 2},
    {"_Rfgc_tvd_matrixsd", (DL_FUNC) &_Rfgc_tvd_matrixsd, 2},
    {"_Rfgc_tvd_matrixsf", (DL_FUNC) &_Rfgc_tvd_matrixsf, 2},
    {"_Rfgc_bhattacharyya_metric_matrixdd", (DL_FUNC) &_Rfgc_bhattacharyya_metric_matrixdd, 2},
    {"_Rfgc_bhattacharyya_metric_matrixdf", (DL_FUNC) &_Rfgc_bhattacharyya_metric_matrixdf, 2},
    {"_Rfgc_bhattacharyya_metric_matrixsd", (DL_FUNC) &_Rfgc_bhattacharyya_metric_matrixsd, 2},
    {"_Rfgc_bhattacharyya_metric_matrixsf", (DL_FUNC) &_Rfgc_bhattacharyya_metric_matrixsf, 2},
    {"_Rfgc_bhattacharyya_distance_matrixdd", (DL_FUNC) &_Rfgc_bhattacharyya_distance_matrixdd, 2},
    {"_Rfgc_bhattacharyya_distance_matrixdf", (DL_FUNC) &_Rfgc_bhattacharyya_distance_matrixdf, 2},
    {"_Rfgc_bhattacharyya_distance_matrixsd", (DL_FUNC) &_Rfgc_bhattacharyya_distance_matrixsd, 2},
    {"_Rfgc_bhattacharyya_distance_matrixsf", (DL_FUNC) &_Rfgc_bhattacharyya_distance_matrixsf, 2},
    {"_Rfgc_RcppExport_registerCCallable", (DL_FUNC) &_Rfgc_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rfgc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
