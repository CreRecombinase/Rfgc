// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <fgc/fgc.h>
#include <RcppBlaze3.h>
#include "../inst/include/Rfgc.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// dist_matrixdd
Rcpp::NumericMatrix dist_matrixdd(blaze::DynamicMatrix<double>& X, int arg);
static SEXP _Rfgc_dist_matrixdd_try(SEXP XSEXP, SEXP argSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type arg(argSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_matrixdd(X, arg));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_dist_matrixdd(SEXP XSEXP, SEXP argSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_dist_matrixdd_try(XSEXP, argSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// llr_matrixdd
Rcpp::NumericMatrix llr_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_llr_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(llr_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_llr_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_llr_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// llr_matrixdf
Rcpp::NumericMatrix llr_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_llr_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(llr_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_llr_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_llr_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// llr_matrixsd
Rcpp::NumericMatrix llr_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_llr_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(llr_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_llr_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_llr_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// llr_matrixsf
Rcpp::NumericMatrix llr_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_llr_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(llr_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_llr_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_llr_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// uwllr_matrixdd
Rcpp::NumericMatrix uwllr_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_uwllr_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(uwllr_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_uwllr_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_uwllr_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// uwllr_matrixdf
Rcpp::NumericMatrix uwllr_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_uwllr_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(uwllr_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_uwllr_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_uwllr_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// uwllr_matrixsd
Rcpp::NumericMatrix uwllr_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_uwllr_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(uwllr_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_uwllr_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_uwllr_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// uwllr_matrixsf
Rcpp::NumericMatrix uwllr_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_uwllr_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(uwllr_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_uwllr_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_uwllr_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsd_matrixdd
Rcpp::NumericMatrix jsd_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_jsd_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jsd_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsd_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsd_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsd_matrixdf
Rcpp::NumericMatrix jsd_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_jsd_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jsd_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsd_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsd_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsd_matrixsd
Rcpp::NumericMatrix jsd_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_jsd_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jsd_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsd_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsd_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsd_matrixsf
Rcpp::NumericMatrix jsd_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_jsd_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jsd_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsd_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsd_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsm_matrixdd
Rcpp::NumericMatrix jsm_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_jsm_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jsm_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsm_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsm_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsm_matrixdf
Rcpp::NumericMatrix jsm_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_jsm_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jsm_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsm_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsm_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsm_matrixsd
Rcpp::NumericMatrix jsm_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_jsm_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jsm_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsm_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsm_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// jsm_matrixsf
Rcpp::NumericMatrix jsm_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_jsm_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jsm_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_jsm_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_jsm_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l2_matrixdd
Rcpp::NumericMatrix l2_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_l2_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l2_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l2_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l2_matrixdf
Rcpp::NumericMatrix l2_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_l2_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l2_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l2_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l2_matrixsd
Rcpp::NumericMatrix l2_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_l2_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l2_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l2_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l2_matrixsf
Rcpp::NumericMatrix l2_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_l2_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l2_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l2_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l1_matrixdd
Rcpp::NumericMatrix l1_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_l1_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l1_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l1_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l1_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l1_matrixdf
Rcpp::NumericMatrix l1_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_l1_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l1_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l1_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l1_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l1_matrixsd
Rcpp::NumericMatrix l1_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_l1_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l1_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l1_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l1_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// l1_matrixsf
Rcpp::NumericMatrix l1_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_l1_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(l1_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_l1_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_l1_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sqrl2_matrixdd
Rcpp::NumericMatrix sqrl2_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_sqrl2_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrl2_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_sqrl2_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_sqrl2_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sqrl2_matrixdf
Rcpp::NumericMatrix sqrl2_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_sqrl2_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrl2_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_sqrl2_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_sqrl2_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sqrl2_matrixsd
Rcpp::NumericMatrix sqrl2_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_sqrl2_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrl2_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_sqrl2_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_sqrl2_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sqrl2_matrixsf
Rcpp::NumericMatrix sqrl2_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_sqrl2_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrl2_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_sqrl2_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_sqrl2_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mkl_matrixdd
Rcpp::NumericMatrix mkl_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_mkl_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_mkl_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_mkl_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mkl_matrixdf
Rcpp::NumericMatrix mkl_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_mkl_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_mkl_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_mkl_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mkl_matrixsd
Rcpp::NumericMatrix mkl_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_mkl_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_mkl_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_mkl_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mkl_matrixsf
Rcpp::NumericMatrix mkl_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_mkl_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_mkl_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_mkl_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tvd_matrixdd
Rcpp::NumericMatrix tvd_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_tvd_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(tvd_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_tvd_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_tvd_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tvd_matrixdf
Rcpp::NumericMatrix tvd_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_tvd_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(tvd_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_tvd_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_tvd_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tvd_matrixsd
Rcpp::NumericMatrix tvd_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_tvd_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(tvd_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_tvd_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_tvd_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// tvd_matrixsf
Rcpp::NumericMatrix tvd_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_tvd_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(tvd_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_tvd_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_tvd_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// poisson_matrixdd
Rcpp::NumericMatrix poisson_matrixdd(blaze::DynamicMatrix<double>& X);
static SEXP _Rfgc_poisson_matrixdd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_matrixdd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_poisson_matrixdd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_poisson_matrixdd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// poisson_matrixdf
Rcpp::NumericMatrix poisson_matrixdf(blaze::DynamicMatrix<float>& X);
static SEXP _Rfgc_poisson_matrixdf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::DynamicMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_matrixdf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_poisson_matrixdf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_poisson_matrixdf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// poisson_matrixsd
Rcpp::NumericMatrix poisson_matrixsd(blaze::CompressedMatrix<double>& X);
static SEXP _Rfgc_poisson_matrixsd_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_matrixsd(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_poisson_matrixsd(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_poisson_matrixsd_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// poisson_matrixsf
Rcpp::NumericMatrix poisson_matrixsf(blaze::CompressedMatrix<float>& X);
static SEXP _Rfgc_poisson_matrixsf_try(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< blaze::CompressedMatrix<float>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_matrixsf(X));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _Rfgc_poisson_matrixsf(SEXP XSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_Rfgc_poisson_matrixsf_try(XSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _Rfgc_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::NumericMatrix(*dist_matrixdd)(blaze::DynamicMatrix<double>&,int)");
        signatures.insert("Rcpp::NumericMatrix(*llr_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*llr_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*llr_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*llr_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*uwllr_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*uwllr_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*uwllr_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*uwllr_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*jsd_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*jsd_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*jsd_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*jsd_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*jsm_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*jsm_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*jsm_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*jsm_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*l2_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*l2_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*l2_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*l2_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*l1_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*l1_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*l1_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*l1_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*sqrl2_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*sqrl2_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*sqrl2_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*sqrl2_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*mkl_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*mkl_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*mkl_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*mkl_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*tvd_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*tvd_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*tvd_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*tvd_matrixsf)(blaze::CompressedMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*poisson_matrixdd)(blaze::DynamicMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*poisson_matrixdf)(blaze::DynamicMatrix<float>&)");
        signatures.insert("Rcpp::NumericMatrix(*poisson_matrixsd)(blaze::CompressedMatrix<double>&)");
        signatures.insert("Rcpp::NumericMatrix(*poisson_matrixsf)(blaze::CompressedMatrix<float>&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _Rfgc_RcppExport_registerCCallable() { 
    R_RegisterCCallable("Rfgc", "_Rfgc_dist_matrixdd", (DL_FUNC)_Rfgc_dist_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_llr_matrixdd", (DL_FUNC)_Rfgc_llr_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_llr_matrixdf", (DL_FUNC)_Rfgc_llr_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_llr_matrixsd", (DL_FUNC)_Rfgc_llr_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_llr_matrixsf", (DL_FUNC)_Rfgc_llr_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_uwllr_matrixdd", (DL_FUNC)_Rfgc_uwllr_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_uwllr_matrixdf", (DL_FUNC)_Rfgc_uwllr_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_uwllr_matrixsd", (DL_FUNC)_Rfgc_uwllr_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_uwllr_matrixsf", (DL_FUNC)_Rfgc_uwllr_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsd_matrixdd", (DL_FUNC)_Rfgc_jsd_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsd_matrixdf", (DL_FUNC)_Rfgc_jsd_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsd_matrixsd", (DL_FUNC)_Rfgc_jsd_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsd_matrixsf", (DL_FUNC)_Rfgc_jsd_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsm_matrixdd", (DL_FUNC)_Rfgc_jsm_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsm_matrixdf", (DL_FUNC)_Rfgc_jsm_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsm_matrixsd", (DL_FUNC)_Rfgc_jsm_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_jsm_matrixsf", (DL_FUNC)_Rfgc_jsm_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l2_matrixdd", (DL_FUNC)_Rfgc_l2_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l2_matrixdf", (DL_FUNC)_Rfgc_l2_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l2_matrixsd", (DL_FUNC)_Rfgc_l2_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l2_matrixsf", (DL_FUNC)_Rfgc_l2_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l1_matrixdd", (DL_FUNC)_Rfgc_l1_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l1_matrixdf", (DL_FUNC)_Rfgc_l1_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l1_matrixsd", (DL_FUNC)_Rfgc_l1_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_l1_matrixsf", (DL_FUNC)_Rfgc_l1_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_sqrl2_matrixdd", (DL_FUNC)_Rfgc_sqrl2_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_sqrl2_matrixdf", (DL_FUNC)_Rfgc_sqrl2_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_sqrl2_matrixsd", (DL_FUNC)_Rfgc_sqrl2_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_sqrl2_matrixsf", (DL_FUNC)_Rfgc_sqrl2_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_mkl_matrixdd", (DL_FUNC)_Rfgc_mkl_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_mkl_matrixdf", (DL_FUNC)_Rfgc_mkl_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_mkl_matrixsd", (DL_FUNC)_Rfgc_mkl_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_mkl_matrixsf", (DL_FUNC)_Rfgc_mkl_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_tvd_matrixdd", (DL_FUNC)_Rfgc_tvd_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_tvd_matrixdf", (DL_FUNC)_Rfgc_tvd_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_tvd_matrixsd", (DL_FUNC)_Rfgc_tvd_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_tvd_matrixsf", (DL_FUNC)_Rfgc_tvd_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_poisson_matrixdd", (DL_FUNC)_Rfgc_poisson_matrixdd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_poisson_matrixdf", (DL_FUNC)_Rfgc_poisson_matrixdf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_poisson_matrixsd", (DL_FUNC)_Rfgc_poisson_matrixsd_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_poisson_matrixsf", (DL_FUNC)_Rfgc_poisson_matrixsf_try);
    R_RegisterCCallable("Rfgc", "_Rfgc_RcppExport_validate", (DL_FUNC)_Rfgc_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rfgc_dist_matrixdd", (DL_FUNC) &_Rfgc_dist_matrixdd, 2},
    {"_Rfgc_llr_matrixdd", (DL_FUNC) &_Rfgc_llr_matrixdd, 1},
    {"_Rfgc_llr_matrixdf", (DL_FUNC) &_Rfgc_llr_matrixdf, 1},
    {"_Rfgc_llr_matrixsd", (DL_FUNC) &_Rfgc_llr_matrixsd, 1},
    {"_Rfgc_llr_matrixsf", (DL_FUNC) &_Rfgc_llr_matrixsf, 1},
    {"_Rfgc_uwllr_matrixdd", (DL_FUNC) &_Rfgc_uwllr_matrixdd, 1},
    {"_Rfgc_uwllr_matrixdf", (DL_FUNC) &_Rfgc_uwllr_matrixdf, 1},
    {"_Rfgc_uwllr_matrixsd", (DL_FUNC) &_Rfgc_uwllr_matrixsd, 1},
    {"_Rfgc_uwllr_matrixsf", (DL_FUNC) &_Rfgc_uwllr_matrixsf, 1},
    {"_Rfgc_jsd_matrixdd", (DL_FUNC) &_Rfgc_jsd_matrixdd, 1},
    {"_Rfgc_jsd_matrixdf", (DL_FUNC) &_Rfgc_jsd_matrixdf, 1},
    {"_Rfgc_jsd_matrixsd", (DL_FUNC) &_Rfgc_jsd_matrixsd, 1},
    {"_Rfgc_jsd_matrixsf", (DL_FUNC) &_Rfgc_jsd_matrixsf, 1},
    {"_Rfgc_jsm_matrixdd", (DL_FUNC) &_Rfgc_jsm_matrixdd, 1},
    {"_Rfgc_jsm_matrixdf", (DL_FUNC) &_Rfgc_jsm_matrixdf, 1},
    {"_Rfgc_jsm_matrixsd", (DL_FUNC) &_Rfgc_jsm_matrixsd, 1},
    {"_Rfgc_jsm_matrixsf", (DL_FUNC) &_Rfgc_jsm_matrixsf, 1},
    {"_Rfgc_l2_matrixdd", (DL_FUNC) &_Rfgc_l2_matrixdd, 1},
    {"_Rfgc_l2_matrixdf", (DL_FUNC) &_Rfgc_l2_matrixdf, 1},
    {"_Rfgc_l2_matrixsd", (DL_FUNC) &_Rfgc_l2_matrixsd, 1},
    {"_Rfgc_l2_matrixsf", (DL_FUNC) &_Rfgc_l2_matrixsf, 1},
    {"_Rfgc_l1_matrixdd", (DL_FUNC) &_Rfgc_l1_matrixdd, 1},
    {"_Rfgc_l1_matrixdf", (DL_FUNC) &_Rfgc_l1_matrixdf, 1},
    {"_Rfgc_l1_matrixsd", (DL_FUNC) &_Rfgc_l1_matrixsd, 1},
    {"_Rfgc_l1_matrixsf", (DL_FUNC) &_Rfgc_l1_matrixsf, 1},
    {"_Rfgc_sqrl2_matrixdd", (DL_FUNC) &_Rfgc_sqrl2_matrixdd, 1},
    {"_Rfgc_sqrl2_matrixdf", (DL_FUNC) &_Rfgc_sqrl2_matrixdf, 1},
    {"_Rfgc_sqrl2_matrixsd", (DL_FUNC) &_Rfgc_sqrl2_matrixsd, 1},
    {"_Rfgc_sqrl2_matrixsf", (DL_FUNC) &_Rfgc_sqrl2_matrixsf, 1},
    {"_Rfgc_mkl_matrixdd", (DL_FUNC) &_Rfgc_mkl_matrixdd, 1},
    {"_Rfgc_mkl_matrixdf", (DL_FUNC) &_Rfgc_mkl_matrixdf, 1},
    {"_Rfgc_mkl_matrixsd", (DL_FUNC) &_Rfgc_mkl_matrixsd, 1},
    {"_Rfgc_mkl_matrixsf", (DL_FUNC) &_Rfgc_mkl_matrixsf, 1},
    {"_Rfgc_tvd_matrixdd", (DL_FUNC) &_Rfgc_tvd_matrixdd, 1},
    {"_Rfgc_tvd_matrixdf", (DL_FUNC) &_Rfgc_tvd_matrixdf, 1},
    {"_Rfgc_tvd_matrixsd", (DL_FUNC) &_Rfgc_tvd_matrixsd, 1},
    {"_Rfgc_tvd_matrixsf", (DL_FUNC) &_Rfgc_tvd_matrixsf, 1},
    {"_Rfgc_poisson_matrixdd", (DL_FUNC) &_Rfgc_poisson_matrixdd, 1},
    {"_Rfgc_poisson_matrixdf", (DL_FUNC) &_Rfgc_poisson_matrixdf, 1},
    {"_Rfgc_poisson_matrixsd", (DL_FUNC) &_Rfgc_poisson_matrixsd, 1},
    {"_Rfgc_poisson_matrixsf", (DL_FUNC) &_Rfgc_poisson_matrixsf, 1},
    {"_Rfgc_RcppExport_registerCCallable", (DL_FUNC) &_Rfgc_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rfgc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
